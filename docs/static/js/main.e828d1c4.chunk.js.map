{"version":3,"sources":["components/AddCategory.js","helpers/getGif.js","components/GifLoadGrid.js","components/GifCollection.js","hooks/useFetchGifs.js","GifApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cat","value","type","onChange","target","placeholder","getGif","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","gif","id","title","images","downsized_medium","GifLoadGrid","className","src","alt","GifCollection","loading","state","setState","useEffect","then","useFetchGifs","img","key","GifApp","categories","c","i","ReactDOM","render","document","getElementById"],"mappings":"uLAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAEZC,mBAAS,IAFG,mBAEzCC,EAFyC,KAE7BC,EAF6B,KAehD,OACE,0BAAMC,SARa,SAACC,GACpBA,EAAEC,iBACEJ,EAAWK,OAAOC,QAAU,IAC9BR,GAAc,SAACS,GAAD,OAAUP,GAAV,mBAAyBO,OACvCN,EAAc,OAKd,2BACEO,MAAOR,EACPS,KAAK,OACLC,SAhBoB,SAACP,GACzBF,EAAcE,EAAEQ,OAAOH,QAgBnBI,YAAY,gB,uBCxBPC,EAAM,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACdC,EADc,gDACiCC,UACnDH,GAFkB,+DAIDI,MAAMF,GAJL,cAIdG,EAJc,gBAKGA,EAAKC,OALR,uBAKZC,EALY,EAKZA,KACFC,EAAOD,EAAKE,KAAI,SAACC,GAAS,IAAD,EAC7B,MAAO,CACLC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXF,IAAG,UAAEA,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAVlB,kBAabM,GAba,4CAAH,sDCENO,EAAc,SAAC,GAAoB,IAAlBH,EAAiB,EAAjBA,MAAOF,EAAU,EAAVA,IACnC,OACE,yBAAKM,UAAU,4CACb,yBAAKC,IAAKP,EAAKQ,IAAKN,IACpB,2BAAIA,KCFGO,EAAgB,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECDnB,SAACA,GAAc,IAAD,EACdf,mBAAS,CACjCsB,KAAM,GACNa,SAAS,IAH6B,mBACjCC,EADiC,KAC1BC,EAD0B,KAcxC,OATAC,qBAAU,WACRxB,EAAOC,GACJwB,MAAK,SAAAhB,GACFc,EAAS,CACLf,KAAMC,EACNY,SAAS,SAGlB,CAACpB,IACGqB,EDZsBI,CAAazB,GAA9BQ,EADiC,EACtCD,KAAWa,EAD2B,EAC3BA,QAClB,OACE,oCACE,wBAAIJ,UAAW,8CAA8ChB,GAC5DoB,GAAW,uBAAGJ,UAAW,yCAAd,cACZ,yBAAKA,UAAU,kBACZR,EAAKC,KAAI,SAACiB,GAAD,OACR,kBAAC,EAAD,eAAaC,IAAKD,EAAIf,IAAQe,UEQzBE,EAhBA,WAAO,IAAD,EACiB3C,mBAAS,CAAC,UAD3B,mBACZ4C,EADY,KACA7C,EADA,KAEnB,OACE,oCACE,uCACA,6BACA,kBAAC,EAAD,CAAaA,cAAeA,IAC5B,4BACG6C,EAAWpB,KAAI,SAACqB,EAAGC,GAAJ,OACd,kBAAC,EAAD,CAAeJ,IAAKI,EAAG/B,SAAU8B,U,MCR3CE,IAASC,OACL,kBAAC,EAAD,MACFC,SAASC,eAAe,U","file":"static/js/main.e828d1c4.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport PropTypes from 'prop-types'\r\n\r\nexport const AddCategory = ({ setCategories }) => {\r\n\r\n  const [inputValue, setInputValue] = useState('');\r\n\r\n  const handleInputChange = (e) => {\r\n    setInputValue(e.target.value);\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (inputValue.trim().length >= 3) {\r\n      setCategories((cat) => [inputValue, ...cat]);\r\n      setInputValue(\"\");\r\n    }\r\n  };\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <input\r\n        value={inputValue}\r\n        type=\"text\"\r\n        onChange={handleInputChange}\r\n        placeholder=\"Search...\"\r\n      />\r\n    </form>\r\n  );\r\n};\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}","export const getGif = async (category) => {\r\n  const url = `http://api.giphy.com/v1/gifs/search?q=${encodeURI(\r\n    category\r\n  )}&limit=10&api_key=WHzpXAOAQkOTRLwqebBCMXVKFyC6zkzi`;\r\n  const resp = await fetch(url);\r\n  const { data } = await resp.json();\r\n  const gifs = data.map((gif) => {\r\n    return {\r\n      id: gif.id,\r\n      title: gif.title,\r\n      gif: gif.images?.downsized_medium.url,\r\n    };\r\n  });\r\n  return gifs;\r\n};\r\n","import React from \"react\";\r\n\r\nexport const GifLoadGrid = ({ title, gif }) => {\r\n  return (\r\n    <div className=\"card animate__animated animate__backInUp\">\r\n      <img src={gif} alt={title} />\r\n      <p>{title}</p>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { useFetchGifs } from \"../hooks/useFetchGifs\";\r\nimport { GifLoadGrid } from \"./GifLoadGrid\";\r\n\r\nexport const GifCollection = ({ category }) => {\r\n  const {data:gifs, loading} = useFetchGifs(category);\r\n  return (\r\n    <>\r\n      <h3 className= \"card animate__animated animate__backInDown\">{category}</h3>\r\n      {loading && <p className =\"card animate__animated animate__flash\">Loading...</p> }\r\n      <div className=\"card-container\">\r\n        {gifs.map((img) => (\r\n          <GifLoadGrid key={img.id} {...img} />\r\n        ))}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n","import { useState, useEffect } from \"react\";\r\nimport { getGif } from \"../helpers/getGif\";\r\n\r\nexport const useFetchGifs = (category) => {\r\n  const [state, setState] = useState({\r\n    data: [],\r\n    loading: true,\r\n  });\r\n  useEffect(() => {\r\n    getGif(category)\r\n      .then(gifs =>{\r\n          setState({\r\n              data: gifs,\r\n              loading: false\r\n          });\r\n      })\r\n  }, [category]);\r\n  return state;\r\n};\r\n","import React, { useState } from \"react\";\r\nimport { AddCategory } from \"./components/AddCategory\";\r\nimport { GifCollection } from \"./components/GifCollection\";\r\n\r\nconst GifApp = () => {\r\n  const [categories, setCategories] = useState([\"zelda\"]);\r\n  return (\r\n    <>\r\n      <h2>Gif App</h2>\r\n      <hr />\r\n      <AddCategory setCategories={setCategories} />\r\n      <ol>\r\n        {categories.map((c, i) => (\r\n          <GifCollection key={i} category={c} />\r\n        ))}\r\n      </ol>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default GifApp;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifApp from './GifApp'\nimport './index.css'\n\nReactDOM.render(\n    <GifApp/>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}